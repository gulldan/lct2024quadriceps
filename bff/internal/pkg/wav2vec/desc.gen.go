// Package wav2vec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package wav2vec

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// BodyExctractEmbeddingExctractEmbeddingPost defines model for Body_exctract_embedding_exctract_embedding_post.
type BodyExctractEmbeddingExctractEmbeddingPost struct {
	AudioFile openapi_types.File `json:"audio_file"`
}

// BodyUpdateDataBaseFindCopyrightInfringementPost defines model for Body_update_data_base_find_copyright_infringement_post.
type BodyUpdateDataBaseFindCopyrightInfringementPost struct {
	AudioFile openapi_types.File `json:"audio_file"`
}

// BodyUpdateDataBaseUpdateDatabasePost defines model for Body_update_data_base_update_database_post.
type BodyUpdateDataBaseUpdateDatabasePost struct {
	AudioFile openapi_types.File `json:"audio_file"`
}

// CopyrightAnswer defines model for CopyrightAnswer.
type CopyrightAnswer struct {
	IDLicenseWav2vec string `json:"ID_license_wav2vec"`
	IDPiracyWav2vec  string `json:"ID_piracy_wav2vec"`
	SegmentWav2vec   string `json:"segment_wav2vec"`
	SegmentsWav2vec  string `json:"segments_wav2vec"`
}

// EmbeddingResponse defines model for EmbeddingResponse.
type EmbeddingResponse struct {
	Embedding []float32 `json:"embedding"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// UpdateDatabaseAnswer defines model for UpdateDatabaseAnswer.
type UpdateDatabaseAnswer struct {
	Response string `json:"response"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// ExctractEmbeddingExctractEmbeddingPostMultipartRequestBody defines body for ExctractEmbeddingExctractEmbeddingPost for multipart/form-data ContentType.
type ExctractEmbeddingExctractEmbeddingPostMultipartRequestBody = BodyExctractEmbeddingExctractEmbeddingPost

// UpdateDataBaseFindCopyrightInfringementPostMultipartRequestBody defines body for UpdateDataBaseFindCopyrightInfringementPost for multipart/form-data ContentType.
type UpdateDataBaseFindCopyrightInfringementPostMultipartRequestBody = BodyUpdateDataBaseFindCopyrightInfringementPost

// UpdateDataBaseUpdateDatabasePostMultipartRequestBody defines body for UpdateDataBaseUpdateDatabasePost for multipart/form-data ContentType.
type UpdateDataBaseUpdateDatabasePostMultipartRequestBody = BodyUpdateDataBaseUpdateDatabasePost

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ExctractEmbeddingExctractEmbeddingPostWithBody request with any body
	ExctractEmbeddingExctractEmbeddingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDataBaseFindCopyrightInfringementPostWithBody request with any body
	UpdateDataBaseFindCopyrightInfringementPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDataBaseUpdateDatabasePostWithBody request with any body
	UpdateDataBaseUpdateDatabasePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ExctractEmbeddingExctractEmbeddingPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExctractEmbeddingExctractEmbeddingPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDataBaseFindCopyrightInfringementPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDataBaseFindCopyrightInfringementPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDataBaseUpdateDatabasePostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDataBaseUpdateDatabasePostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewExctractEmbeddingExctractEmbeddingPostRequestWithBody generates requests for ExctractEmbeddingExctractEmbeddingPost with any type of body
func NewExctractEmbeddingExctractEmbeddingPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exctract_embedding")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDataBaseFindCopyrightInfringementPostRequestWithBody generates requests for UpdateDataBaseFindCopyrightInfringementPost with any type of body
func NewUpdateDataBaseFindCopyrightInfringementPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/find_copyright_infringement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDataBaseUpdateDatabasePostRequestWithBody generates requests for UpdateDataBaseUpdateDatabasePost with any type of body
func NewUpdateDataBaseUpdateDatabasePostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/update_database")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ExctractEmbeddingExctractEmbeddingPostWithBodyWithResponse request with any body
	ExctractEmbeddingExctractEmbeddingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExctractEmbeddingExctractEmbeddingPostResponse, error)

	// UpdateDataBaseFindCopyrightInfringementPostWithBodyWithResponse request with any body
	UpdateDataBaseFindCopyrightInfringementPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDataBaseFindCopyrightInfringementPostResponse, error)

	// UpdateDataBaseUpdateDatabasePostWithBodyWithResponse request with any body
	UpdateDataBaseUpdateDatabasePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDataBaseUpdateDatabasePostResponse, error)
}

type ExctractEmbeddingExctractEmbeddingPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EmbeddingResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ExctractEmbeddingExctractEmbeddingPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExctractEmbeddingExctractEmbeddingPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDataBaseFindCopyrightInfringementPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CopyrightAnswer
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateDataBaseFindCopyrightInfringementPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDataBaseFindCopyrightInfringementPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDataBaseUpdateDatabasePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateDatabaseAnswer
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateDataBaseUpdateDatabasePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDataBaseUpdateDatabasePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ExctractEmbeddingExctractEmbeddingPostWithBodyWithResponse request with arbitrary body returning *ExctractEmbeddingExctractEmbeddingPostResponse
func (c *ClientWithResponses) ExctractEmbeddingExctractEmbeddingPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExctractEmbeddingExctractEmbeddingPostResponse, error) {
	rsp, err := c.ExctractEmbeddingExctractEmbeddingPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExctractEmbeddingExctractEmbeddingPostResponse(rsp)
}

// UpdateDataBaseFindCopyrightInfringementPostWithBodyWithResponse request with arbitrary body returning *UpdateDataBaseFindCopyrightInfringementPostResponse
func (c *ClientWithResponses) UpdateDataBaseFindCopyrightInfringementPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDataBaseFindCopyrightInfringementPostResponse, error) {
	rsp, err := c.UpdateDataBaseFindCopyrightInfringementPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDataBaseFindCopyrightInfringementPostResponse(rsp)
}

// UpdateDataBaseUpdateDatabasePostWithBodyWithResponse request with arbitrary body returning *UpdateDataBaseUpdateDatabasePostResponse
func (c *ClientWithResponses) UpdateDataBaseUpdateDatabasePostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDataBaseUpdateDatabasePostResponse, error) {
	rsp, err := c.UpdateDataBaseUpdateDatabasePostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDataBaseUpdateDatabasePostResponse(rsp)
}

// ParseExctractEmbeddingExctractEmbeddingPostResponse parses an HTTP response from a ExctractEmbeddingExctractEmbeddingPostWithResponse call
func ParseExctractEmbeddingExctractEmbeddingPostResponse(rsp *http.Response) (*ExctractEmbeddingExctractEmbeddingPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExctractEmbeddingExctractEmbeddingPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EmbeddingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateDataBaseFindCopyrightInfringementPostResponse parses an HTTP response from a UpdateDataBaseFindCopyrightInfringementPostWithResponse call
func ParseUpdateDataBaseFindCopyrightInfringementPostResponse(rsp *http.Response) (*UpdateDataBaseFindCopyrightInfringementPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDataBaseFindCopyrightInfringementPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CopyrightAnswer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateDataBaseUpdateDatabasePostResponse parses an HTTP response from a UpdateDataBaseUpdateDatabasePostWithResponse call
func ParseUpdateDataBaseUpdateDatabasePostResponse(rsp *http.Response) (*UpdateDataBaseUpdateDatabasePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDataBaseUpdateDatabasePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateDatabaseAnswer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
