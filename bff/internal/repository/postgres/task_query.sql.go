// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task_query.sql

package pgsql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrigVideo = `-- name: CreateOrigVideo :one
INSERT INTO origvideo (
  video_id, video_hash, video_minio_id
) VALUES (
  $1, $2, $3
)
RETURNING video_id, video_hash, video_minio_id
`

type CreateOrigVideoParams struct {
	VideoID      pgtype.Text
	VideoHash    pgtype.Text
	VideoMinioID pgtype.Text
}

func (q *Queries) CreateOrigVideo(ctx context.Context, arg CreateOrigVideoParams) (Origvideo, error) {
	row := q.db.QueryRow(ctx, createOrigVideo, arg.VideoID, arg.VideoHash, arg.VideoMinioID)
	var i Origvideo
	err := row.Scan(&i.VideoID, &i.VideoHash, &i.VideoMinioID)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO task (
  video_id, preview_id, status, video_name
) VALUES (
  $1, $2, $3, $4
)
RETURNING task_id, video_name, video_id, preview_id, status, copyright
`

type CreateTaskParams struct {
	VideoID   pgtype.Text
	PreviewID pgtype.Text
	Status    NullTaskStatus
	VideoName pgtype.Text
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.VideoID,
		arg.PreviewID,
		arg.Status,
		arg.VideoName,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.VideoName,
		&i.VideoID,
		&i.PreviewID,
		&i.Status,
		&i.Copyright,
	)
	return i, err
}

const getOrigVideo = `-- name: GetOrigVideo :one
SELECT video_id, video_hash, video_minio_id FROM origvideo
WHERE video_id = $1 LIMIT 1
`

func (q *Queries) GetOrigVideo(ctx context.Context, videoID pgtype.Text) (Origvideo, error) {
	row := q.db.QueryRow(ctx, getOrigVideo, videoID)
	var i Origvideo
	err := row.Scan(&i.VideoID, &i.VideoHash, &i.VideoMinioID)
	return i, err
}

const getOrigVideos = `-- name: GetOrigVideos :many
SELECT video_id, video_hash, video_minio_id FROM origvideo
ORDER BY video_id DESC
LIMIT $1 OFFSET $2
`

type GetOrigVideosParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetOrigVideos(ctx context.Context, arg GetOrigVideosParams) ([]Origvideo, error) {
	rows, err := q.db.Query(ctx, getOrigVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Origvideo
	for rows.Next() {
		var i Origvideo
		if err := rows.Scan(&i.VideoID, &i.VideoHash, &i.VideoMinioID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrigVideosByHash = `-- name: GetOrigVideosByHash :many
SELECT video_id, video_hash, video_minio_id FROM origvideo
WHERE video_hash = $1
ORDER BY video_id DESC
`

func (q *Queries) GetOrigVideosByHash(ctx context.Context, videoHash pgtype.Text) ([]Origvideo, error) {
	rows, err := q.db.Query(ctx, getOrigVideosByHash, videoHash)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Origvideo
	for rows.Next() {
		var i Origvideo
		if err := rows.Scan(&i.VideoID, &i.VideoHash, &i.VideoMinioID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTask = `-- name: GetTask :one
SELECT task_id, video_name, video_id, preview_id, status, copyright FROM task
WHERE task_id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, taskID int64) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.VideoName,
		&i.VideoID,
		&i.PreviewID,
		&i.Status,
		&i.Copyright,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT task_id, video_name, video_id, preview_id, status, copyright FROM task
ORDER BY task_id DESC
LIMIT $1 OFFSET $2
`

type GetTasksParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.VideoName,
			&i.VideoID,
			&i.PreviewID,
			&i.Status,
			&i.Copyright,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksCount = `-- name: GetTasksCount :one
SELECT count(*) FROM task
`

func (q *Queries) GetTasksCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTasksCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateTaskCopyright = `-- name: UpdateTaskCopyright :exec
UPDATE task SET copyright = $2
WHERE task_id = $1
`

type UpdateTaskCopyrightParams struct {
	TaskID    int64
	Copyright []byte
}

func (q *Queries) UpdateTaskCopyright(ctx context.Context, arg UpdateTaskCopyrightParams) error {
	_, err := q.db.Exec(ctx, updateTaskCopyright, arg.TaskID, arg.Copyright)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE task SET status = $2
WHERE task_id = $1
`

type UpdateTaskStatusParams struct {
	TaskID int64
	Status NullTaskStatus
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.Exec(ctx, updateTaskStatus, arg.TaskID, arg.Status)
	return err
}
